<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/fonts/**" location="/resources/fonts/" />
	<resources mapping="/img/**" location="/resources/img/" />
	<resources mapping="/js/**" location="/resources/js/" />
	<resources mapping="/scss/**" location="/resources/scss/" />
	<resources mapping="/vendor/**" location="/resources/vendor/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.spring.dct" />
	
    <!-- 웹 소켓 핸들러 -->    
    <websocket:handlers>
        <websocket:mapping path="/websocket/chat" handler="chatHandler"/>
    </websocket:handlers>
 
    <beans:bean id="chatHandler" class="com.spring.dct.handler.WebSocketHandler"/>

	<!-- 인터셉터 빈 등록 방식 -->
	<beans:bean id="autoLogin"
		class="com.spring.dct.user.commons.interceptor.AutoLoginInterceptor" />
	<beans:bean id="adminAutoLogin"
		class="com.spring.dct.admin.commons.interceptor.AdminAutoLoginInterceptor" />

	<interceptors>
		<!-- <mapping path="/board/**"/> 이렇게 하면 모든 board에 interceptor 적용 -->
		<!-- <interceptor> <mapping path="/board/write"/> <mapping path="/board/content/**"/> 
			<beans:bean class="com.spring.mvc.board.commons.interceptor.BoardInterceptor"/> 
			</interceptor> -->
		<!-- 미리 등록한 인터셉터의 빈을 주입하는 방식 -->
		<interceptor>
			<mapping path="/" />
			<beans:ref bean="autoLogin" />
		</interceptor>
		<interceptor>
			<mapping path="/" />
			<beans:ref bean="adminAutoLogin" />
		</interceptor>

	</interceptors>

	<!-- 파일 업로드 -->
	<!-- 반드시 id를 multipartResolver로 선언 Multipart 형식으로 전달되는 데이터를 스프링 mvc에서 사용할 
		수 있도록 변환해 주는 객체 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

		<!-- 최대 업로드 가능한 바이트 크기(바이트 단위), -1은 제한이 없음을 의미 -->
		<!-- 1메가바이트 = 1024*바이트, 1바이트 = 1024*1키로바이트 -->
		<beans:property name="maxUploadSize" value="1048576000" />

		<!-- 업로드 요청을 변환할 때 사용할 문자 인코딩 방식 -->
		<beans:property name="defaultEncoding" value="utf-8" />
	</beans:bean>
	
</beans:beans>
